import { Demo } from './types/demo';
import { Names } from './types/names';
import { Avatars } from './types/avatars';
import { Connect } from './types/connect';
import { Response } from './types/response';
import { CustomStyle } from './types/styles';
import { TextInput } from './types/textInput';
import { ServiceIO } from './services/serviceIO';
import { HTMLClassUtilities } from './types/html';
import { DropupStyles } from './types/dropupStyles';
import { WebModel } from './types/webModel/webModel';
import { ValidateInput } from './types/validateInput';
import { RequestBodyLimits } from './types/chatLimits';
import { ErrorMessages, OnError } from './types/error';
import { SpeechToTextConfig } from './types/microphone';
import { TextToSpeechConfig } from './types/textToSpeech';
import { DirectConnection } from './types/directConnection';
import { ValidationHandler } from './types/validationHandler';
import { InternalHTML } from './utils/webComponent/internalHTML';
import { InsertKeyViewStyles } from './types/insertKeyViewStyles';
import { RequestInterceptor, ResponseInterceptor } from './types/interceptors';
import { DisableSubmitButton, SubmitButtonStyles } from './types/submitButton';
import { MessageContent, IntroMessage, MessageStyles, UserContent, OnMessage } from './types/messages';
import { CameraFilesServiceConfig, FilesServiceConfig, MicrophoneFilesServiceConfig } from './types/fileServiceConfigs';

export declare class DeepChat extends InternalHTML {
    connect?: Connect;
    directConnection?: DirectConnection;
    webModel?: WebModel;
    requestBodyLimits?: RequestBodyLimits;
    requestInterceptor?: RequestInterceptor;
    responseInterceptor?: ResponseInterceptor;
    validateInput?: ValidateInput;
    chatStyle?: CustomStyle;
    attachmentContainerStyle?: CustomStyle;
    dropupStyles?: DropupStyles;
    inputAreaStyle?: CustomStyle;
    textInput?: TextInput;
    submitButtonStyles?: SubmitButtonStyles;
    auxiliaryStyle?: string;
    history?: MessageContent[];
    introMessage?: IntroMessage;
    avatars?: Avatars;
    names?: Names;
    displayLoadingBubble?: boolean;
    errorMessages?: ErrorMessages;
    messageStyles?: MessageStyles;
    textToSpeech?: boolean | TextToSpeechConfig;
    speechToText?: boolean | SpeechToTextConfig;
    images?: boolean | FilesServiceConfig;
    gifs?: boolean | FilesServiceConfig;
    camera?: boolean | CameraFilesServiceConfig;
    audio?: boolean | FilesServiceConfig;
    microphone?: boolean | MicrophoneFilesServiceConfig;
    mixedFiles?: boolean | FilesServiceConfig;
    dragAndDrop?: boolean | CustomStyle;
    introPanelStyle?: CustomStyle;
    htmlClassUtilities?: HTMLClassUtilities;
    getMessages: () => MessageContent[];
    submitUserMessage: (content: UserContent) => void;
    addMessage: (message: Response, isUpdate?: boolean) => void;
    focusInput: () => void;
    refreshMessages: () => void;
    clearMessages: (isReset?: boolean) => void;
    scrollToBottom: () => void;
    disableSubmitButton: DisableSubmitButton;
    setPlaceholderText: (text: string) => void;
    onMessage?: OnMessage;
    onClearMessages?: () => void;
    onComponentRender?: (ref: DeepChat) => void;
    onError?: OnError;
    demo?: Demo;
    _hasBeenRendered: boolean;
    _auxiliaryStyleApplied: boolean;
    _activeService?: ServiceIO;
    _childElement?: HTMLElement;
    _validationHandler?: ValidationHandler;
    _insertKeyViewStyles?: InsertKeyViewStyles;
    constructor();
    private readonly _elementRef;
    private changeToChatView;
    onRender(): void;
    disconnectedCallback(): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'deep-chat': DeepChat;
    }
}
//# sourceMappingURL=deepChat.d.ts.map